/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.chords.microservices.benchmark;

import java.net.URISyntaxException;
import java.util.concurrent.CountDownLatch;

import choral.reactive.SimpleSession;
import choral.reactive.TCPReactiveClient;
import choral.reactive.TCPReactiveServer;
import choral.reactive.tracing.TelemetrySession;
import io.opentelemetry.api.trace.Span;
import io.opentelemetry.sdk.OpenTelemetrySdk;

public class App {

    CountDownLatch latch = new CountDownLatch(2);
    TCPReactiveServer<SimpleSession> serverA;
    TCPReactiveServer<SimpleSession> serverB;

    public void startServiceA() throws Exception {
        serverA = new TCPReactiveServer<>("serviceA", (ctx) -> {
            System.out.println("ServiceA received new session");
        });

        new Thread(() -> {
            try {
                serverA.listen("localhost:8201");
            } catch (Exception e) {
                throw new RuntimeException(e);
            }
        }, "serviceA").start();

        SimpleSession session = SimpleSession.makeSession("choreography", "serviceA");
        serverA.registerSession(session);

        TelemetrySession telemetrySession = new TelemetrySession(OpenTelemetrySdk.builder().build(), session,
                Span.getInvalid());

        try (TCPReactiveClient<SimpleSession> client = new TCPReactiveClient<>("localhost:8202", "serviceA",
                telemetrySession);) {

            Choreography_A chor = new Choreography_A(client.chanA(session), serverA.chanB(session, "serviceB"));
            chor.pingPong();

            latch.countDown();
        }
    }

    public void startServiceB() throws URISyntaxException {
        serverB = new TCPReactiveServer<>("serviceB", (ctx) -> {
            switch (ctx.session.choreographyID) {
                case "choreography":
                    Choreography_B chor = new Choreography_B(ctx.chanB("serviceA"), ctx.chanA("localhost:8201"));
                    chor.pingPong();
                    latch.countDown();
                    break;
                default:
                    throw new RuntimeException("unknown choreography: " + ctx.session.choreographyID);
            }
        });

        new Thread(() -> {
            try {
                serverB.listen("localhost:8202");
            } catch (URISyntaxException e) {
                throw new RuntimeException(e);
            }
        }, "serviceB").start();

    }

    public static void main(String[] args) throws Exception {
        App app = new App();

        app.startServiceB();
        app.startServiceA();

        app.latch.await();
        Thread.sleep(1000);

        app.serverA.close();
        app.serverB.close();
    }
}
