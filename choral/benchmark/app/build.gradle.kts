import java.io.BufferedReader
import java.io.InputStreamReader
import java.util.concurrent.TimeUnit

/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.10.2/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    // Apply the application plugin to add support for building a CLI application in Java.
    application

    id("com.google.protobuf") version "0.9.4"
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
    mavenLocal()
}

dependencies {
    // Use JUnit Jupiter for testing.
    testImplementation(libs.junit.jupiter)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    // This dependency is used by the application.
    implementation(libs.guava)

    implementation("dev.chords:choral-reactive")

    // gRPC
    runtimeOnly("io.grpc:grpc-netty-shaded:1.68.1")
    implementation("io.grpc:grpc-protobuf:1.68.1")
    implementation("io.grpc:grpc-stub:1.68.1")
    compileOnly("org.apache.tomcat:annotations-api:6.0.53")
}

// Apply a specific Java toolchain to ease working on different environments.
java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    // Define the main class for the application.
    mainClass = "dev.chords.microservices.benchmark.Benchmark"
}

tasks.register<JavaExec>("runA") {
    dependsOn("classes")
    mainClass = "dev.chords.microservices.benchmark.ServiceA"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.register<JavaExec>("runB") {
    dependsOn("classes")
    mainClass = "dev.chords.microservices.benchmark.ServiceB"
    classpath = sourceSets.main.get().runtimeClasspath
}

tasks.named<Test>("test") {
    // Use JUnit Platform for unit tests.
    useJUnitPlatform()
}

// Compile choral code
tasks.register("compileChoral") {
    val choreographies = listOf(
        "SimpleChoreography",
        "GreeterChoreography",
    )

    doLast {
        choreographies.forEach { name: String ->
            val process = ProcessBuilder()
                .command(listOf(
                    "choral", "epp",
                    "--sources=./app/src/main/choral",
                    "--headers=./app/src/main/choral",
                    "--target=${buildDir}/generated/choral",
                    name
                ))
                .redirectOutput(ProcessBuilder.Redirect.PIPE)
                .redirectError(ProcessBuilder.Redirect.PIPE)
                .directory(rootProject.projectDir)
                .start()

            process.waitFor(60, TimeUnit.SECONDS)

            if (process.exitValue() != 0) {
                val output = BufferedReader(InputStreamReader(process.inputStream)).readText()
                throw GradleException("Failed to generate choreography '$name':\n\n$output")
            }
        }
    }
}

tasks.build {
    dependsOn("compileChoral")
}

sourceSets {
   main {
      java {
         srcDir("${buildDir}/generated/choral")
      }
   }
}

// Compile protobuf code
protobuf {
    protoc {
        artifact = "com.google.protobuf:protoc:3.25.5"
    }
    plugins {
        create("grpc") {
            artifact = "io.grpc:protoc-gen-grpc-java:1.68.1"
        }
    }
    generateProtoTasks {
        all().forEach { task ->
            task.plugins {
                create("grpc") {}
            }
        }
    }
}
