/*
 * This source file was generated by the Gradle 'init' task
 */
package dev.chords.microservices.benchmark;

import java.util.Scanner;

import choral.reactive.tracing.JaegerConfiguration;

public class Benchmark {

    final static String SERVICE_A = "localhost:8201";
    final static String SERVICE_B = "localhost:8202";
    final static int GRPC_PORT = 5430;

    interface TestAction<T> {
        void test(T value) throws Exception;
    }

    public static void benchmarkChoreography(TestAction<ServiceA> testAction) throws Exception {

        final String JAEGER_ENDPOINT = "http://localhost:4317";

        GrpcServer grpcServer = new GrpcServer();
        grpcServer.start(GRPC_PORT);

        ServiceA serviceA = new ServiceA(JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "ServiceA"), SERVICE_B);
        ServiceB serviceB = new ServiceB(JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "ServiceB"), SERVICE_A);

        serviceA.listen(SERVICE_A);
        serviceB.listen(SERVICE_B);

        testAction.test(serviceA);

        serviceA.close();
        serviceB.close();
        grpcServer.stop();
    }

    public static void benchmarkGrpc(TestAction<GrpcClient> testAction) throws Exception {
        final String JAEGER_ENDPOINT = "http://localhost:4317";

        GrpcServer server = new GrpcServer();
        GrpcClient client = new GrpcClient(GRPC_PORT, JaegerConfiguration.initTelemetry(JAEGER_ENDPOINT, "GrpcClient"));

        server.start(GRPC_PORT);

        testAction.test(client);

        client.shutdown();
        server.stop();
    }

    public static void main(String[] args) throws Exception {

        benchmarkChoreography(serviceA -> {
            serviceA.startPingPong();
            serviceA.startGreeting();

            // serviceA.startGreeting();

            for (int i = 0; i < 5; i++) {
                serviceA.startPingPong();
                Thread.sleep(100);
            }

            for (int i = 0; i < 5; i++) {
                serviceA.startGreeting();
                Thread.sleep(100);
            }
        });

        benchmarkGrpc(client -> {
            long startTime = System.currentTimeMillis();
            client.greet("Warmup");
            long endTime = System.currentTimeMillis();
            System.out.println("Warmup took " + (endTime - startTime) + " ms");

            // Scanner input = new Scanner(System.in);
            // System.out.print("Press Enter to perform benchmark...");
            // input.nextLine();
            // input.close();

            for (int i = 0; i < 20; i++) {
                startTime = System.currentTimeMillis();
                String greeting = client.greet("Name" + i);
                endTime = System.currentTimeMillis();

                System.out.println("Got back greeting: " + greeting + "(" + (endTime -
                        startTime) + " ms)");
                Thread.sleep(100);
            }
        });

    }
}
